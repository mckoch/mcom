= Describing the problem =
  After handling microcontent in a variety of environments, I had two recurring experiences: people only want to change small things if their collection (i.e. a news magazine or a corporate website) once has been established. These websites regularly consist of a number of items, displayed in a context (this context is what we usually call the webpage). Sometimes collections of collections have to be arranged and put into a new context, creating thematical pages. Keywords, categories, RSS, commenting - content management consists of a variety of techniques and systems, all describing HOW to display content, but not trying to describe the content itself: While on one hand we have sophisticated models to translate the procedures from the real world into applications to handle whatever content a computer can display, on the other hand we lack of models describing the qualities and semantics of the content itself. Don't panic - this is far from the point of making a program conscious of its tasks. But we are moving one step into the semantics of micro content objects: the relations (here: links from and to) with other micro content objects is made part of the object's properties. In simple words: people always wish to combine and update as well content as application applying their own ideas and criteria. More than that, they are not willing to deal with a programmers view on categorization etc., while they are interested in the main question: how do I get A,B,C and D together on one page? An how do I tell that C relates to F and G, while A and B both relate to F? The answer is quite simple: save the URIs of F and G tgether with A, and tell F and G about that. Then save it along with them. Easy, hm? Not quite. Simple pupose and main question: "These items belong together. How do I tell them?"

= What changes? =
  By applying the MCOM, you get a model that does not require any new programming language, skills, frameworks or included classes. By applying MCOM you get documents which you may manipulate based on their content's relationships. You may view and "drill down" into content of any MIME type and display content by levels from various sources, all on one dynamic page ("to contain and to be contained"). You get a new descriptor for the network of micro content objects - you even may view informational trees, display all documents along a certain "path" to a certain depth and get a dynamic view on all objects based on their "depth". With MCOM, you can script documents based on their content rather than based on their technical structure. All this can be done using the traditional web programmer's toolbox and is widely based on AJAX style - may be it makes  life a little easier by having one page displaying bunchs of content and deep links in one convenient place without ever reloading any new page on whatsoever site.